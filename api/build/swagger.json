{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"Sprocket": {
				"properties": {
					"pitch": {
						"type": "number",
						"format": "double"
					},
					"outside_diameter": {
						"type": "number",
						"format": "double"
					},
					"pitch_diameter": {
						"type": "number",
						"format": "double"
					},
					"teeth": {
						"type": "number",
						"format": "double"
					},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"pitch",
					"outside_diameter",
					"pitch_diameter",
					"teeth",
					"id"
				],
				"type": "object"
			},
			"Pick_Sprocket.Exclude_keyofSprocket.id__": {
				"properties": {
					"teeth": {
						"type": "number",
						"format": "double"
					},
					"pitch_diameter": {
						"type": "number",
						"format": "double"
					},
					"outside_diameter": {
						"type": "number",
						"format": "double"
					},
					"pitch": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"teeth",
					"pitch_diameter",
					"outside_diameter",
					"pitch"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Sprocket.id_": {
				"$ref": "#/components/schemas/Pick_Sprocket.Exclude_keyofSprocket.id__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"SprocketData": {
				"$ref": "#/components/schemas/Omit_Sprocket.id_"
			},
			"Factory": {
				"properties": {
					"chart_data": {
						"properties": {
							"time": {
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							},
							"sprocket_production_goal": {
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							},
							"sprocket_production_actual": {
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							}
						},
						"required": [
							"time",
							"sprocket_production_goal",
							"sprocket_production_actual"
						],
						"type": "object"
					},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"chart_data",
					"id"
				],
				"type": "object"
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "powerflex-challenge",
		"version": "1.0.0",
		"license": {
			"name": "ISC"
		},
		"contact": {
			"name": "Bruno Gallo"
		}
	},
	"paths": {
		"/sprockets/{sprocketId}": {
			"get": {
				"operationId": "GetSprocket",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Sprocket"
								}
							}
						}
					}
				},
				"tags": [
					"Sprocket"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "sprocketId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateSprocket",
				"responses": {
					"204": {
						"description": "No Content"
					}
				},
				"tags": [
					"Sprocket"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "sprocketId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SprocketData"
							}
						}
					}
				}
			}
		},
		"/sprockets": {
			"post": {
				"operationId": "CreateSprocket",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Sprocket"
								}
							}
						}
					}
				},
				"tags": [
					"Sprocket"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SprocketData"
							}
						}
					}
				}
			}
		},
		"/factories": {
			"get": {
				"operationId": "GetFactories",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Factory"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"Factory"
				],
				"security": [],
				"parameters": []
			}
		},
		"/factories/{factoryId}": {
			"get": {
				"operationId": "GetFactory",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Factory"
								}
							}
						}
					}
				},
				"tags": [
					"Factory"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "factoryId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}